'use strict';

const fs = require('fs');
const path = require('path');
const debug = require('./debug');
const { findServiceFiels, camelize } = require('./utils');

/**
 * 生成 ts 文件，用于代码补全
 * @param {string[]} paths
 */
function findServicesToTyping(paths) {
  const typingsPath = path.resolve(process.cwd(), 'typings');
  const headerCode = [
    '// zenweb service typing',
    '// This file is automatically generated',
    '// Please do not modify',
    `// date: ${new Date().toLocaleString()}`,
    `// user: ${process.env.USER || process.env.USERNAME || 'unknown'}@${process.env.COMPUTERNAME || 'unknown'}`,
    '',
  ];
  const declareCode = [];

  for (const directory of paths) {
    headerCode.push(`// directory: ${directory}`);
    for (const [filepath, fullpath] of findServiceFiels(directory)) {
      const propertyName = camelize(filepath);
      const className = propertyName[0].toUpperCase() + propertyName.slice(1);
      const importFilename = path.relative(typingsPath, fullpath).replace(/\\/g, '/');
      headerCode.push(`import * as ${className} from '${importFilename}';`);
      declareCode.push(`    ${propertyName}: ${className};`);
    }
  }

  const code = [...headerCode];
  code.push('');
  code.push(`declare module '@zenweb/service' {`);
  code.push(`  interface Services {`);
  code.push(...declareCode);
  code.push(`  }`);
  code.push(`}`);
  code.push('');

  const tsFile = path.join(typingsPath, 'service.d.ts');

  if (!fs.existsSync(typingsPath)) {
    fs.mkdirSync(typingsPath);
  }

  debug(`write types file: ${tsFile}`);
  fs.writeFileSync(tsFile, code.join('\n'));
}

module.exports = {
  findServicesToTyping,
};
