import fs from 'node:fs/promises';
import path from 'node:path';
import { globby } from 'globby';
import debug from './debug.js';
import { camelize } from './utils.js';

/**
 * 生成 ts 文件，用于代码补全
 * @param {string[]} paths service 文件扫描路径
 * @param {string} tsFile ts 文件保存路径
 * @param {string} [patterns]
 */
export async function findServicesToTyping(paths, tsFile, patterns) {
  const typingsPath = path.dirname(tsFile);
  const headerCode = [
    '// zenweb service typing',
    '// This file is automatically generated',
    '// Please do not modify',
    `// date: ${new Date().toLocaleString()}`,
    `// user: ${process.env.USER || process.env.USERNAME || 'unknown'}@${process.env.COMPUTERNAME || 'unknown'}`,
    '',
  ];
  const declareCode = [];

  for (const directory of paths) {
    headerCode.push(`// directory: ${directory}`);
    for (const fullpath of await globby(patterns || '**/*.js', { cwd: directory, absolute: true })) {
      const cls = await import('file://' + fullpath);
      if (cls.default) {
        const filename = fullpath.slice(directory.length + 1);
        const propertyName = camelize(filename);
        const className = propertyName[0].toUpperCase() + propertyName.slice(1);
        let importFilename = path.relative(typingsPath, fullpath).replace(/\\/g, '/');
        if (!importFilename.startsWith('.')) {
          importFilename = `./${importFilename}`;
        }
        headerCode.push(`import ${className} from '${importFilename}';`);
        declareCode.push(`    ${propertyName}: ${className};`);
      }
    }
  }

  const code = [...headerCode];
  code.push('');
  code.push(`declare module '@zenweb/service' {`);
  code.push(`  interface Services {`);
  code.push(...declareCode);
  code.push(`  }`);
  code.push(`}`);
  code.push('');

  debug(`write types file: ${tsFile}`);

  await fs.mkdir(typingsPath, { recursive: true });
  await fs.writeFile(tsFile, code.join('\n'));
}
